package springs;

import java.awt.Color;

import org.opensourcephysics.controls.AbstractSimulation;
import org.opensourcephysics.controls.SimulationControl;
import org.opensourcephysics.display.Circle;
import org.opensourcephysics.frames.DisplayFrame;

public class BoveProgram extends AbstractSimulation {

	SpringParticle[] bungee;
	double restDistance;
	static double time = 0.001;
	static double timeElapsed = 0;
	static double height;
	static double g = 9.81;
	static double minHeight;
	DisplayFrame frame = new DisplayFrame("X", "Y", "Bungee");

	protected void doStep() {

		for (int i = 0; i < bungee.length; i++) {

			double Fx1 = 0;
			double Fx2 = 0;
			double Fy1 = 0;
			double Fy2 = 0;

			if(i != (bungee.length-1)) {
				Fx1 = xForce(bungee[i], bungee[i+1]);
				Fy1 = yForce(bungee[i], bungee[i+1]) + bungee[i].mass * g;
			}
			else {
				Fx1 = 0;
				Fy1 = bungee[i].mass * g;
			}
		
			if(i != 0) {
				Fx2 = xForce(bungee[i], bungee[i-1]);
				Fy2 = yForce(bungee[i], bungee[i-1]);
			}

			double Fxtot = Fx1 + Fx2;
			double Fytot = Fy1 + Fy2;

			double ax = Fxtot/(bungee[i].mass);
			double ay = Fytot/(bungee[i].mass);

			bungee[i].vx += ax * time;
			bungee[i].vy += ay * time;

			/*
			System.out.println("---");
			System.out.println(i);
			System.out.println(Fx1);
			System.out.println(Fx2);
			System.out.println(Fy1);
			System.out.println(Fy2);
			System.out.println(bungee[i].vx);
			System.out.println(bungee[i].vy);
			 */

		}


		for (int i = 1; i < bungee.length; i++) {
			bungee[i].x += bungee[i].vx * time;
			bungee[i].y += bungee[i].vy * time;
			bungee[i].setXY(bungee[i].x, bungee[i].y);
		}

		timeElapsed += time;

		double totalK = (bungee[0].k)/(bungee.length);

		if(minHeight > bungee[bungee.length-1].y) {
			minHeight = bungee[bungee.length-1].y;
		}
		else {
			if(bungee[bungee.length-1].vy < 0.5 && bungee[bungee.length-1].vy > -0.5) {
				System.out.println("minimum height reached: " + minHeight + " k for that height: " + totalK);
			}
		}

	}

	public void initialize() {

		frame.clearDrawables();
		
		time = control.getDouble("time step");
		height = control.getDouble("height");

		int numParticles = (int)control.getDouble("number of particles");
		double mass = control.getDouble("total mass")/numParticles;
		double yStep = (control.getDouble("length"))/numParticles;
		double kEach = control.getDouble("k");

		bungee = new SpringParticle[numParticles];

		this.delayTime = 10;
		
		int colorStep = (int)(255/bungee.length);
		int currentColor = colorStep;

		for (int i = 0; i < bungee.length; i++) {
			bungee[i] = new SpringParticle(mass, kEach, 0, height-(i*yStep), 0, 0);
			bungee[i].setXY(bungee[i].x, bungee[i].y);
			bungee[i].color = new Color(currentColor * i, 0, 255 - (currentColor * i));
			frame.addDrawable(bungee[i]);
		}

		restDistance = distance(bungee[1], bungee[2]);

		minHeight = height - control.getDouble("length");

		frame.setVisible(true);
		frame.setPreferredMinMax(-5, 5, 0, 120);

	}

	/**
	 * finds individual k given total k
	 * @param kTot
	 * @param numParticles
	 * @return
	 */
	private double findK(double kTot, int numParticles) {
		return kTot * numParticles;
	}

	public void reset() {
		control.setValue("time step", 0.004);
		control.setValue("number of particles", 200);
		control.setValue("length", 20);
		control.setValue("height", 100);
		control.setValue("total mass", 50);
		control.setValue("object mass", 60);
		control.setValue("k", 2500);
	}

	public void stop() {

	}

	/**
	 * calculates the spring force on particle 1 due to particle 2
	 * @param part1
	 * @param part2
	 * @return
	 */
	public double xForce(SpringParticle part1, SpringParticle part2) {

		double dist = distance(part1, part2) - restDistance;

		double yDist = part2.y - part1.y;
		double xDist = part2.x - part1.x;

		double angle = Math.atan2(yDist, xDist);

		double totalForce = part1.k * dist;

		double xForce = totalForce * Math.cos(angle);

		return xForce;
	}

	public double yForce(SpringParticle part1, SpringParticle part2) {

		double dist = distance(part1, part2) - restDistance;

		double yDist = part2.y - part1.y;
		double xDist = part2.x - part1.x;

		double angle = Math.atan2(yDist, xDist);

		double totalForce = part1.k * dist;

		double yForce = totalForce * Math.sin(angle);

		return yForce;

	}

	public double distance(SpringParticle a, SpringParticle b) {

		double dist = Math.sqrt(Math.pow((a.x - b.x),2) + Math.pow((a.y - b.y),2));

		return dist;
	}

	public static void main(String[] args) {
		SimulationControl.createApp(new BoveProgram());
	}

}
